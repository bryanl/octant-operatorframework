// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/octant-operatorframework/pkg/oof (interfaces: PortForward)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPortForward is a mock of PortForward interface
type MockPortForward struct {
	ctrl     *gomock.Controller
	recorder *MockPortForwardMockRecorder
}

// MockPortForwardMockRecorder is the mock recorder for MockPortForward
type MockPortForwardMockRecorder struct {
	mock *MockPortForward
}

// NewMockPortForward creates a new mock instance
func NewMockPortForward(ctrl *gomock.Controller) *MockPortForward {
	mock := &MockPortForward{ctrl: ctrl}
	mock.recorder = &MockPortForwardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortForward) EXPECT() *MockPortForwardMockRecorder {
	return m.recorder
}

// ToService mocks base method
func (m *MockPortForward) ToService(arg0 context.Context, arg1, arg2 string, arg3 uint16) (string, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ToService indicates an expected call of ToService
func (mr *MockPortForwardMockRecorder) ToService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToService", reflect.TypeOf((*MockPortForward)(nil).ToService), arg0, arg1, arg2, arg3)
}
