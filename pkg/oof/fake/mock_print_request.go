// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanl/octant-operatorframework/pkg/oof (interfaces: PrintRequest)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	service "github.com/vmware-tanzu/octant/pkg/plugin/service"
	runtime "k8s.io/apimachinery/pkg/runtime"
	reflect "reflect"
)

// MockPrintRequest is a mock of PrintRequest interface
type MockPrintRequest struct {
	ctrl     *gomock.Controller
	recorder *MockPrintRequestMockRecorder
}

// MockPrintRequestMockRecorder is the mock recorder for MockPrintRequest
type MockPrintRequestMockRecorder struct {
	mock *MockPrintRequest
}

// NewMockPrintRequest creates a new mock instance
func NewMockPrintRequest(ctrl *gomock.Controller) *MockPrintRequest {
	mock := &MockPrintRequest{ctrl: ctrl}
	mock.recorder = &MockPrintRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrintRequest) EXPECT() *MockPrintRequestMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockPrintRequest) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPrintRequestMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPrintRequest)(nil).Context))
}

// DashboardClient mocks base method
func (m *MockPrintRequest) DashboardClient() service.Dashboard {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardClient")
	ret0, _ := ret[0].(service.Dashboard)
	return ret0
}

// DashboardClient indicates an expected call of DashboardClient
func (mr *MockPrintRequestMockRecorder) DashboardClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardClient", reflect.TypeOf((*MockPrintRequest)(nil).DashboardClient))
}

// Object mocks base method
func (m *MockPrintRequest) Object() runtime.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object")
	ret0, _ := ret[0].(runtime.Object)
	return ret0
}

// Object indicates an expected call of Object
func (mr *MockPrintRequestMockRecorder) Object() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockPrintRequest)(nil).Object))
}
